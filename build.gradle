plugins {
    id "com.diffplug.spotless" version "5.3.0"
    id 'pl.allegro.tech.build.axion-release' version '1.11.0'
    id 'maven-publish'
    id 'signing'
}

scmVersion {
    tag {
        prefix = ''
    }
}

spotless {
    java {
        target '**/src/*/java/**/*.java'
        importOrder() // standard import order
        //importOrder('java', 'javax', 'com.acme', '') // or importOrderFile

        removeUnusedImports()

        googleJavaFormat() // has its own section below
        //prettier()         // has its own section below
//        clangFormat()      // has its own section below
//
        licenseHeader '/*******************************************************************************\n' +
                ' * Copyright (C) $YEAR, Massimiliano Ziccardi\n' +
                ' *\n' +
                ' * Licensed under the Apache License, Version 2.0 (the "License");\n' +
                ' * you may not use this file except in compliance with the License.\n' +
                ' * You may obtain a copy of the License at\n' +
                ' *\n' +
                ' *     http://www.apache.org/licenses/LICENSE-2.0\n' +
                ' *\n' +
                ' * Unless required by applicable law or agreed to in writing, software\n' +
                ' * distributed under the License is distributed on an "AS IS" BASIS,\n' +
                ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' +
                ' * See the License for the specific language governing permissions and\n' +
                ' * limitations under the License.\n' +
                ' *******************************************************************************/' // or licenseHeaderFile
    }
}

group 'it.jnrpe'
apply plugin: 'distribution'
//version gitVersion()
project.version=scmVersion.version

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenCentral()
    }

    plugins.withType(JavaPlugin).configureEach {
        java {
            modularity.inferModulePath = true
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
        }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }

    tasks.javadoc {
        failOnError = false
    }

    tasks.withType(Javadoc).all {
        failOnError = false
    }

    tasks.compileJava {
        options.javaModuleVersion = provider { scmVersion.version }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    jar {
        manifest {
            attributes 'Implementation-Version': archiveVersion
            attributes 'Implementation-Title': 'JNRPE'
        }
    }

//    publishing {
//        publications {
//            mavenJava(MavenPublication) {
//                groupId = 'it.jnrpe'
//                artifactId = project.name
//                from components.java
//                url = ''
//            }
//        }
//    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = 'it.jnrpe'
                artifactId = project.name
                version = scmVersion.version

                from components.java
            }
        }
        repositories {
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = scmVersion.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }

    signing {
        required = false
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign configurations.archives
    }
}

